package com;


import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import io.github.bonigarcia.wdm.WebDriverManager;


import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;


public class DocIdMulti {


    private WebDriver driver;
    private WebDriverWait wait;
    private Actions actions;
    private String originalWindow;


    // Simple per-run logs
    private final List<String> successDocs = new ArrayList<>();
    private final Map<String, String> failedDocs = new LinkedHashMap<>();


    public DocIdMulti() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments(
                "--disable-popup-blocking",
                "--disable-notifications",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding");
        driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver, Duration.ofSeconds(30));
        actions = new Actions(driver);
    }


    // ---------- Entry points ----------


    public void performLogin(String startUrl, String username, String password) throws InterruptedException {
        System.out.println("üåê Navigating to: " + startUrl);
        driver.get(startUrl);


        System.out.println("üîê Performing automated login...");
        try {
            WebElement usernameField = wait.until(ExpectedConditions.elementToBeClickable(By.id("txtUserID")));
            usernameField.clear();
            usernameField.sendKeys(username);
            System.out.println("‚úÖ Username entered");


            WebElement passwordField = driver.findElement(By.id("txtPassword"));
            passwordField.clear();
            passwordField.sendKeys(password);
            System.out.println("‚úÖ Password entered");


            clickElementWithRetry(By.id("btnOK"), "Login button");
            Thread.sleep(8000);
            System.out.println("‚úÖ Login completed");


            navigateToAdvancedReviewModuleWithRetry();


            originalWindow = driver.getWindowHandle();
            System.out.println("‚úÖ Ready for document processing");
        } catch (Exception e) {
            System.err.println("‚ùå Login failed: " + e.getMessage());
            throw new RuntimeException("Login process failed", e);
        }
    }


    // New multi-doc runner: login once, then loop
    public void processDocIDs(List<String> docIDs) {
        if (originalWindow == null || driver == null) {
            throw new IllegalStateException("Call performLogin first before processing docs.");
        }
        for (String docID : docIDs) {
            System.out.println("\nüöÄ Begin DocID: " + docID);
            try {
                // Always re-enter the module before each doc, per requirement
                navigateToAdvancedReviewModuleWithRetry();


                // From module landing, find+open doc, click rework, handle ARM, final submit,
                // close leftovers
                clickDocIDAndSwitchToReworkFrame(docID);
                clickReworkButton();
                openAndProcessNewTab(); // will return to original after Save
                setFinalStatusAndSubmit();


                // Safety: after each doc, make sure only the original window remains
                closeAllExceptOriginal();
                driver.switchTo().window(originalWindow);


                successDocs.add(docID);
                System.out.println("üéâ Completed DocID: " + docID);
            } catch (Exception e) {
                System.err.println("‚ùå Failed DocID: " + docID + " -> " + e.getMessage());
                failedDocs.put(docID, e.toString());
                // Clean up and continue with next doc
                try {
                    closeAllExceptOriginal();
                } catch (Exception ignored) {
                }
                try {
                    driver.switchTo().window(originalWindow);
                } catch (Exception ignored) {
                }
            }
        }


        // Summary
        System.out.println("\n===== RUN SUMMARY =====");
        System.out.println("Success: " + successDocs);
        System.out.println("Failed : " + failedDocs);
        System.out.println("=======================\n");
    }


    private void navigateToAdvancedReviewModuleWithRetry() {
        System.out.println("üéØ Navigating to Advanced Review Module...");
        int maxRetries = 3;
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                if (trySeleniumHoverNavigation()) {
                    System.out.println("‚úÖ Selenium hover navigation successful");
                    return;
                }
                if (tryJavaScriptNavigation()) {
                    System.out.println("‚úÖ JavaScript navigation successful");
                    return;
                }
                System.out.println("‚ö†Ô∏è Navigation attempt " + attempt + " failed, retrying...");
                Thread.sleep(2000);
            } catch (Exception e) {
                if (attempt == maxRetries) {
                    throw new RuntimeException("Navigation failed after " + maxRetries + " attempts", e);
                }
            }
        }
    }


    // ---------- Single-doc workflow steps (reused per doc) ----------


    private void clickDocIDAndSwitchToReworkFrame(String docID) {
        System.out.println("üìã Step 1: Find Doc ID and switch to Rework frame");
        switchToFrameWithTable();
        WebElement targetLink = findDocIDViaPagination(docID);
        clickFoundElement(targetLink, docID);
        switchToNestedReworkFrame();
    }


    private void switchToNestedReworkFrame() {
        System.out.println("üñºÔ∏è Switching to NESTED Rework frame...");
        try {
            driver.switchTo().defaultContent();
            wait.until(ExpectedConditions
                    .frameToBeAvailableAndSwitchToIt(By.xpath("//iframe[contains(@src, 'ARMpage.aspx')]")));
            System.out.println("‚úÖ Switched to parent frame (ARMpage.aspx)");
            wait.until(ExpectedConditions
                    .frameToBeAvailableAndSwitchToIt(By.xpath("//iframe[contains(@src, 'PreviewLines.aspx')]")));
            System.out.println("‚úÖ Switched to child frame (PreviewLines.aspx)");
            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("btnRework")));
            System.out.println("üéâ Successfully switched to nested frame containing Rework button!");
        } catch (Exception e) {
            throw new RuntimeException("Failed to switch to the nested Rework frame: " + e.getMessage(), e);
        }
    }


    private void clickReworkButton() {
        System.out.println("üîß Step 2: Clicking Rework button");
        clickElementWithRetry(By.id("btnRework"), "Rework button");
    }


    private void openAndProcessNewTab() {
        System.out.println("üëâ Step 3: Clicking 'lbtARM' and processing new tab...");


        Set<String> windowsBeforeClick = driver.getWindowHandles();
        clickLbtARMInCorrectFrame();


        // Wait for new tabs, log them, identify the correct one, and close the rest.
        waitForNewWindowAndPickARM(windowsBeforeClick);


        try {
            // Apply default rules
            clickElementWithRetry(By.id("btnApplyDefault"), "'Apply Default' button");


            // Dialog is in an iframe with id dialog-body (still in ARM tab)
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id("dialog-body")));
            System.out.println("‚úÖ Switched to 'dialog-body' iframe.");


            WebElement dropdown = wait
                    .until(ExpectedConditions.presenceOfElementLocated(By.id("dgFlags_ctl02_DropDownList1")));
            new Select(dropdown).selectByValue("21");
            System.out.println("‚úÖ Set dropdown to 'Apply All Rules'.");


            clickElementWithRetry(By.id("btnApply"), "'Apply' button inside dialog");


            // Return to main document of ARM tab
            driver.switchTo().defaultContent();
            System.out.println("‚úÖ Returned to main document of ARM tab.");


            // Click Save - this will close the ARM tab automatically
            clickElementWithRetry(By.id("btnSave"), "'Save' rules button");


            // Wait for ARM tab to close and automatically return to original
            wait.until(ExpectedConditions.numberOfWindowsToBe(1));
            System.out.println("‚úÖ ARM tab closed automatically, returned to original tab.");


        } catch (Exception e) {
            // On any error, close non-original tabs to unblock subsequent docs
            try {
                closeAllExceptOriginal();
            } catch (Exception ignored) {
            }
            throw e;
        } finally {
            // Ensure focus back on original
            try {
                driver.switchTo().window(originalWindow);
            } catch (Exception ignored) {
            }
        }
    }


    // *** MODIFIED METHOD WITH LOGGING AND SAFER HANDLING ***
    private void waitForNewWindowAndPickARM(Set<String> beforeHandles) {
        // 1. Wait for at least one new window to open.
        try {
            new WebDriverWait(driver, Duration.ofSeconds(20))
                    .until(d -> d.getWindowHandles().size() > beforeHandles.size());
        } catch (TimeoutException e) {
            throw new RuntimeException("No new window detected for ARM after click.");
        }


        // 2. Identify all newcomers.
        Set<String> currentHandles = driver.getWindowHandles();
        List<String> newHandles = currentHandles.stream()
                .filter(h -> !beforeHandles.contains(h))
                .collect(Collectors.toList());


        System.out.println("üîç Found " + newHandles.size() + " new window(s). Inspecting each...");


        String armTab = null;
        Map<String, String> debugInfo = new LinkedHashMap<>();


        // 3. Log everything first, and identify the ARM tab without closing anything.
        for (String handle : newHandles) {
            try {
                driver.switchTo().window(handle);
                // Give the page a moment to load its title/url
                waitUntilWindowStable(5); 


                String url = safeCurrentUrl();
                String title = safeTitle();
                debugInfo.put(handle, "URL: " + url + " | Title: " + title);
                System.out.println("  [INSPECTING] Handle: " + handle + " -> URL: " + url + " | Title: " + title);


                // Heuristic to identify the ARM tab
                boolean looksLikeARM = (url != null && url.contains("AIS_Review.aspx")) ||
                                       (title != null && title.toLowerCase().contains("review")) ||
                                       hasArmDomMarker();


                if (looksLikeARM) {
                    if (armTab == null) {
                        armTab = handle;
                        System.out.println("    -> ‚úÖ This looks like the ARM tab. Marking for keep.");
                    } else {
                        System.out.println("    -> ‚ö†Ô∏è Found another potential ARM tab. Will stick with the first one found.");
                    }
                } else {
                     System.out.println("    -> ‚ûñ This does not look like the ARM tab. Will be closed if an ARM tab is found.");
                }


            } catch (Exception e) {
                System.err.println("  [ERROR] Could not inspect handle " + handle + ": " + e.getMessage());
            }
        }


        // 4. If no ARM tab was found, fail with debug information.
        if (armTab == null) {
            System.err.println("‚ùå Could not identify the ARM tab from the new windows.");
            System.err.println("Debug Info of all new tabs:");
            debugInfo.forEach((h, info) -> System.err.println("  - " + info));
            throw new RuntimeException("Could not find the 'Advance Review Module' tab based on heuristics.");
        }


        // 5. Close all new windows that are NOT the identified ARM tab.
        System.out.println("üöÄ Proceeding with ARM tab: " + armTab + ". Closing all other new tabs.");
        for (String handle : newHandles) {
            if (!handle.equals(armTab)) {
                try {
                    driver.switchTo().window(handle);
                    System.out.println("  [CLOSING] Unwanted tab with URL: " + driver.getCurrentUrl());
                    driver.close();
                } catch (Exception e) {
                    System.err.println("  [ERROR] Failed to close unwanted window " + handle + ": " + e.getMessage());
                }
            }
        }


        // 6. Switch to the ARM tab, make sure it's in focus, and continue.
        driver.switchTo().window(armTab);
        handleAlertIfPresent("on ARM tab");
        bringWindowToFront();
        System.out.println("‚úÖ Successfully focused on the ARM tab.");
    }




    private void bringWindowToFront() {
        try {
            driver.manage().window().setSize(new Dimension(1024, 768));
            driver.manage().window().setPosition(new Point(0, 0));
            driver.manage().window().maximize();
            ((JavascriptExecutor) driver).executeScript("window.focus();");
            Thread.sleep(250);
        } catch (Exception ignored) {
        }
    }


    private boolean waitUntilWindowStable(int seconds) {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        long end = System.currentTimeMillis() + seconds * 1000L;
        while (System.currentTimeMillis() < end) {
            try {
                Object rs = js.executeScript("return document.readyState");
                if ("complete".equals(rs))
                    return true;
            } catch (JavascriptException ignored) {
                 // May fail on about:blank pages, just continue waiting
            }
            try {
                Thread.sleep(300);
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
            }
        }
        return false;
    }


    private String tryCurrentUrl(long msTimeout) {
        long end = System.currentTimeMillis() + msTimeout;
        while (System.currentTimeMillis() < end) {
            try {
                return driver.getCurrentUrl();
            } catch (UnhandledAlertException e) {
                handleAlertIfPresent("before getCurrentUrl");
            } catch (WebDriverException e) {
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                }
            }
        }
        return null;
    }


    private String safeTitle() {
        try {
            return driver.getTitle();
        } catch (Exception e) {
            return null;
        }
    }


    private boolean hasArmDomMarker() {
        try {
            return !driver.findElements(By.id("btnApplyDefault")).isEmpty();
        } catch (Exception e) {
            return false;
        }
    }


    private void handleAlertIfPresent(String context) {
        try {
            WebDriverWait alertWait = new WebDriverWait(driver, Duration.ofSeconds(2));
            Alert alert = alertWait.until(ExpectedConditions.alertIsPresent());
            String alertText = alert.getText();
            System.out.println("‚ö†Ô∏è Alert found " + context + ": " + alertText);
            alert.accept();
        } catch (TimeoutException ignored) {
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Error handling alert " + context + ": " + e.getMessage());
        }
    }


    private String safeCurrentUrl() {
        try {
            return driver.getCurrentUrl();
        } catch (UnhandledAlertException e) {
            handleAlertIfPresent("before getCurrentUrl");
            try {
                return driver.getCurrentUrl();
            } catch (Exception ex) {
                return "";
            }
        } catch (NoSuchWindowException e) {
            return "";
        }
    }


    private void clickLbtARMInCorrectFrame() {
        System.out.println("‚è≥ Waiting for page to reload before clicking lbtARM...");
        sleep(2000);
        try {
            driver.switchTo().defaultContent();
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(1)); // ARMpage.aspx typically frame 1
            System.out.println("‚úÖ Switched to frame 1 to find lbtARM.");
            wait.until(ExpectedConditions.elementToBeClickable(By.id("lbtARM"))).click();
            System.out.println("‚úÖ Clicked lbtARM button.");
        } catch (Exception e) {
            throw new RuntimeException("Failed to click lbtARM button: " + e.getMessage(), e);
        }
    }


    private void setFinalStatusAndSubmit() {
        System.out.println("üëâ Step 4: Setting final status and submitting on original tab");
        try {
            By inputLocator = By.cssSelector("input[id$='CtrlCmtAnnt_ddlPrefab_Input']");
            switchToFrameWithElement(inputLocator);


            WebElement input = wait.until(ExpectedConditions.elementToBeClickable(inputLocator));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", input);
            input.click();
            System.out.println("‚úÖ Opened status dropdown on original tab");


            By completeLi = By.xpath(
                    "//div[contains(@id,'CtrlCmtAnnt_ddlPrefab_DropDown')]//li[contains(@class,'rcbItem') and normalize-space(text())='Complete']");
            WebElement complete = wait.until(ExpectedConditions.elementToBeClickable(completeLi));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", complete);
            System.out.println("‚úÖ Clicked 'Complete' item via DOM");


            new WebDriverWait(driver, Duration.ofSeconds(10))
                    .until(ExpectedConditions.attributeToBe(inputLocator, "value", "Complete"));
            System.out.println("‚úÖ Input value now 'Complete'");


            waitForAjaxAndDomStable();


            By saveBtnLocator = By.id("CtrlCmtAnnt_btnSave");
            switchToFrameWithElement(saveBtnLocator);
            WebElement saveBtn = wait.until(ExpectedConditions.elementToBeClickable(saveBtnLocator));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", saveBtn);
            System.out.println("‚úÖ Final Submit completed on original tab");


        } catch (Exception e) {
            throw new RuntimeException("Failed to set final status and submit: " + e.getMessage(), e);
        }
    }


    // ---------- Helper Methods ----------


    private void waitForAjaxAndDomStable() {
        JavascriptExecutor js = (JavascriptExecutor) driver;
        wait.until(d -> {
            try {
                Object ready = js.executeScript("return document.readyState");
                boolean docReady = "complete".equals(ready);
                Object jq = js.executeScript("return (window.jQuery && jQuery.active) ? jQuery.active : 0");
                int jqActive = (jq instanceof Number) ? ((Number) jq).intValue() : 0;
                Object msAjax = js.executeScript(
                        "return !(window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager " +
                                "&& Sys.WebForms.PageRequestManager.getInstance().get_isInAsyncPostBack());");
                boolean ajaxIdle = (msAjax instanceof Boolean) ? (Boolean) msAjax : true;
                return docReady && jqActive == 0 && ajaxIdle;
            } catch (Exception e) {
                return true;
            }
        });
    }


    private void clickElementWithRetry(By locator, String name) {
        int attempts = 0;
        while (attempts < 3) {
            try {
                wait.until(ExpectedConditions.elementToBeClickable(locator)).click();
                System.out.println("‚úÖ Clicked " + name);
                return;
            } catch (StaleElementReferenceException | ElementClickInterceptedException e) {
                System.out.println("Click for " + name + " failed. Retrying...");
                attempts++;
                sleep(500);
            }
        }
        throw new RuntimeException("Could not click " + name + " after " + attempts + " attempts.");
    }


    private boolean trySeleniumHoverNavigation() {
        try {
            List<WebElement> hoverElements = driver.findElements(By.xpath(
                    "//span[@class='rmText rmExpandDown' and normalize-space(text())='Medical Bill Review Solutions']"));
            if (hoverElements.isEmpty())
                return false;
            actions.moveToElement(hoverElements.get(0)).perform();
            Thread.sleep(1000);
            List<WebElement> clickElements = driver.findElements(
                    By.xpath("//span[@class='rmText' and normalize-space(text())='Advanced Review Module']"));
            if (clickElements.isEmpty())
                return false;
            clickElements.get(0).click();
            Thread.sleep(2000);
            return true;
        } catch (Exception e) {
            return false;
        }
    }


    private boolean tryJavaScriptNavigation() {
        try {
            ((JavascriptExecutor) driver).executeScript(
                    "const el=document.querySelector(\".rmText.rmExpandDown\");" +
                            "el&&el.dispatchEvent(new MouseEvent(\"mouseover\",{bubbles:!0}))," +
                            "setTimeout(()=>{" +
                            " const t=[...document.querySelectorAll(\".rmText\")]" +
                            "   .find(e=>\"Advanced Review Module\"===e.textContent.trim());" +
                            " t&&t.click(),window.navSuccess=!0" +
                            "},1e3);");
            Thread.sleep(2000);
            Boolean success = (Boolean) ((JavascriptExecutor) driver).executeScript("return window.navSuccess;");
            return success != null && success;
        } catch (Exception e) {
            return false;
        }
    }


    private boolean switchToFrameWithTable() {
        driver.switchTo().defaultContent();
        List<WebElement> iframes = driver.findElements(By.cssSelector("iframe, frame"));
        for (int i = 0; i < iframes.size(); i++) {
            try {
                driver.switchTo().frame(i);
                if (!driver.findElements(By.xpath("//*[text()='Preview' or contains(text(),'Doc ID')]")).isEmpty()) {
                    return true;
                }
                driver.switchTo().defaultContent();
            } catch (NoSuchFrameException e) {
                driver.switchTo().defaultContent();
            }
        }
        return false;
    }


    private void switchToFrameWithElement(By locator) {
        driver.switchTo().defaultContent();
        List<WebElement> frames = driver.findElements(By.cssSelector("iframe,frame"));
        for (int i = 0; i < frames.size(); i++) {
            try {
                driver.switchTo().frame(i);
                if (!driver.findElements(locator).isEmpty()) {
                    return;
                }
            } catch (Exception ignored) {
            }
            driver.switchTo().defaultContent();
        }
        throw new RuntimeException("Target element not found in any frame");
    }


    private WebElement findDocIDViaPagination(String docID) {
        WebElement targetLink = searchDocIDOnCurrentPage(docID);
        if (targetLink != null)
            return targetLink;


        for (int i = 1; i <= 50; i++) {
            if (!clickNextPage())
                break;
            sleep(3000);
            targetLink = searchDocIDOnCurrentPage(docID);
            if (targetLink != null)
                return targetLink;
        }
        throw new RuntimeException("Doc ID " + docID + " not found.");
    }


    private boolean clickNextPage() {
        // 1) Prefer explicit Next if present/enabled
        List<WebElement> nexts = driver.findElements(
                By.xpath("//a[normalize-space()='Next' or normalize-space()='>']"));
        if (!nexts.isEmpty()) {
            nexts.get(0).click();
            waitForPagerChange();
            return true;
        }


        // 2) Determine current active page (as <span>)
        int current;
        try {
            WebElement active = driver.findElement(
                    By.xpath("//span[not(@href) and number(normalize-space())=number(normalize-space())]"));
            current = Integer.parseInt(active.getText().trim());
        } catch (org.openqa.selenium.NoSuchElementException e) {
            List<WebElement> nums = driver.findElements(
                    By.xpath("//a[normalize-space()!='...' and number(normalize-space())=number(normalize-space())]"));
            if (nums.isEmpty())
                return false;
            current = nums.stream().mapToInt(el -> Integer.parseInt(el.getText().trim())).min().orElse(1) - 1;
        }


        int target = current + 1;


        // 3) If target is a link, click it
        List<WebElement> linkNext = driver.findElements(
                By.xpath("//a[normalize-space()='" + target + "']"));
        if (!linkNext.isEmpty()) {
            linkNext.get(0).click();
            waitForPagerChange();
            return true;
        }


        // 4) If target is already active as span, we're on it
        List<WebElement> spanNext = driver.findElements(
                By.xpath("//span[normalize-space()='" + target + "']"));
        if (!spanNext.isEmpty()) {
            waitForPagerChange();
            return true;
        }


        // 5) Click rightmost ellipsis to advance block, then re-check for target (span
        // or link)
        List<WebElement> ellipses = driver.findElements(By.xpath("//a[normalize-space()='...']"));
        if (!ellipses.isEmpty()) {
            WebElement rightEllipsis = ellipses.get(ellipses.size() - 1);
            rightEllipsis.click();
            waitForPagerChange();


            // If target became the active span after block shift, we're on it
            spanNext = driver.findElements(By.xpath("//span[normalize-space()='" + target + "']"));
            if (!spanNext.isEmpty()) {
                return true;
            }
            // Or if it appeared as a link, click it now
            linkNext = driver.findElements(By.xpath("//a[normalize-space()='" + target + "']"));
            if (!linkNext.isEmpty()) {
                linkNext.get(0).click();
                waitForPagerChange();
                return true;
            }


            // Fallback: smallest link greater than current (DOM order)
            List<WebElement> greater = driver.findElements(
                    By.xpath("//a[number(normalize-space()) > " + current + "]"));
            if (!greater.isEmpty()) {
                greater.get(0).click();
                waitForPagerChange();
                return true;
            }
        }


        // 6) No way forward
        return false;
    }


    private void waitForPagerChange() {
        new WebDriverWait(driver, Duration.ofSeconds(10))
                .until(ExpectedConditions.presenceOfElementLocated(
                        By.xpath(
                                "//a[normalize-space()='Next' or normalize-space()='...' or number(normalize-space())=number(normalize-space())]")));
    }


    private WebElement searchDocIDOnCurrentPage(String docID) {
        try {
            return driver.findElement(By.xpath("//a[@class='Preview' and text()='" + docID + "']"));
        } catch (org.openqa.selenium.NoSuchElementException e) {
            return null;
        }
    }


    private void clickFoundElement(WebElement targetLink, String docID) {
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", targetLink);
        } catch (Exception e) {
            throw new RuntimeException("Failed to click found Doc ID element.", e);
        }
    }


    private void closeAllExceptOriginal() {
        Set<String> handles = new HashSet<>(driver.getWindowHandles());
        for (String h : handles) {
            if (!h.equals(originalWindow)) {
                try {
                    driver.switchTo().window(h);
                    driver.close();
                } catch (Exception ignored) {
                }
            }
        }
        try {
            driver.switchTo().window(originalWindow);
        } catch (Exception ignored) {
        }
    }


    private void sleep(long ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }


    public void closeBrowser() {
        if (driver != null)
            driver.quit();
    }


    public static void main(String[] args) {
        DocIdMulti automation = new DocIdMulti();
        try {
            automation.performLogin("https://geicotest.aisreview.com/AIS/", "venkata.amarthaluru", "TestingDVL7@102025");


            // Provide multiple Doc IDs here
            List<String> docIDs = Arrays.asList(
                    "GE0004090"
            );


            automation.processDocIDs(docIDs);


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            automation.closeBrowser();
        }
    }
}
